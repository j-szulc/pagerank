<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
	<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
	<!-- NOTES:  -->
	<defs>
		<linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
			<stop stop-color="#eeeeee" offset="5%"/>
			<stop stop-color="#eeeeb0" offset="95%"/>
		</linearGradient>
	</defs>
	<style type="text/css">
		text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
		#search, #ignorecase { opacity:0.1; cursor:pointer; }
		#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
		#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
		#title { text-anchor:middle; font-size:17px}
		#unzoom { cursor:pointer; }
		#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
		.hide { display:none; }
		.parent { opacity:0.5; }
	</style>
	<script type="text/ecmascript">
		<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
	</script>
	<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"/>
	<text id="title" x="600.00" y="24">Flame Graph</text>
	<text id="details" x="10.00" y="693"></text>
	<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
	<text id="search" x="1090.00" y="24">Search</text>
	<text id="ignorecase" x="1174.00" y="24">ic</text>
	<text id="matched" x="1090.00" y="693"></text>
	<g id="frames">
		<g>
			<title>__gthread_once (7 samples, 13.73%)</title>
			<rect x="773.5" y="469" width="162.0" height="15.0" fill="rgb(249,24,51)" rx="2" ry="2"/>
			<text x="776.53" y="479.5">__gthread_once</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;void, (32 samples, 62.75%)</title>
			<rect x="33.1" y="533" width="740.4" height="15.0" fill="rgb(237,56,9)" rx="2" ry="2"/>
			<text x="36.14" y="543.5">std::__invoke_impl&lt;void,</text>
		</g>
		<g>
			<title>__pthread_once_slow (32 samples, 62.75%)</title>
			<rect x="33.1" y="453" width="740.4" height="15.0" fill="rgb(211,53,43)" rx="2" ry="2"/>
			<text x="36.14" y="463.5">__pthread_once_slow</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples,
				62.75%)
			</title>
			<rect x="33.1" y="565" width="740.4" height="15.0" fill="rgb(225,42,28)" rx="2" ry="2"/>
			<text x="36.14" y="575.5">std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tupl..</text>
		</g>
		<g>
			<title>__gthread_once (4 samples, 7.84%)</title>
			<rect x="1028.0" y="485" width="92.6" height="15.0" fill="rgb(226,44,20)" rx="2" ry="2"/>
			<text x="1031.04" y="495.5">__gthread_o..</text>
		</g>
		<g>
			<title>clone (1 samples, 1.96%)</title>
			<rect x="10.0" y="597" width="23.1" height="15.0" fill="rgb(240,40,18)" rx="2" ry="2"/>
			<text x="13.00" y="607.5">c..</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::computeForNetwork(Network (7 samples, 13.73%)</title>
			<rect x="773.5" y="197" width="162.0" height="15.0" fill="rgb(227,36,42)" rx="2" ry="2"/>
			<text x="776.53" y="207.5">MultiThreadedPageRan..</text>
		</g>
		<g>
			<title>std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (7 samples, 13.73%)</title>
			<rect x="773.5" y="389" width="162.0" height="15.0" fill="rgb(253,52,24)" rx="2" ry="2"/>
			<text x="776.53" y="399.5">std::__invoke_r&lt;std:..</text>
		</g>
		<g>
			<title>__gnu_cxx::stdio_sync_filebuf&lt;char, (3 samples, 5.88%)</title>
			<rect x="958.6" y="533" width="69.4" height="15.0" fill="rgb(220,120,13)" rx="2" ry="2"/>
			<text x="961.63" y="543.5">__gnu_c..</text>
		</g>
		<g>
			<title>pageRankComputationWithNetwork (7 samples, 13.73%)</title>
			<rect x="1028.0" y="629" width="162.0" height="15.0" fill="rgb(234,26,29)" rx="2" ry="2"/>
			<text x="1031.04" y="639.5">pageRankComputationW..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="149" width="46.3" height="15.0" fill="rgb(252,128,53)" rx="2" ry="2"/>
			<text x="776.53" y="159.5">std:..</text>
		</g>
		<g>
			<title>__gthread_join (4 samples, 7.84%)</title>
			<rect x="1028.0" y="437" width="92.6" height="15.0" fill="rgb(235,182,32)" rx="2" ry="2"/>
			<text x="1031.04" y="447.5">__gthread_j..</text>
		</g>
		<g>
			<title>std::__basic_future&lt;MultiThreadedPageRankComputer::{unnamed (4 samples, 7.84%)</title>
			<rect x="1028.0" y="565" width="92.6" height="15.0" fill="rgb(244,199,9)" rx="2" ry="2"/>
			<text x="1031.04" y="575.5">std::__basi..</text>
		</g>
		<g>
			<title>std::getline&lt;char, (4 samples, 7.84%)</title>
			<rect x="935.5" y="597" width="92.5" height="15.0" fill="rgb(236,62,44)" rx="2" ry="2"/>
			<text x="938.49" y="607.5">std::getlin..</text>
		</g>
		<g>
			<title>getc (3 samples, 5.88%)</title>
			<rect x="958.6" y="501" width="69.4" height="15.0" fill="rgb(212,141,54)" rx="2" ry="2"/>
			<text x="961.63" y="511.5">getc</text>
		</g>
		<g>
			<title>__gthread_once (32 samples, 62.75%)</title>
			<rect x="33.1" y="469" width="740.4" height="15.0" fill="rgb(227,168,45)" rx="2" ry="2"/>
			<text x="36.14" y="479.5">__gthread_once</text>
		</g>
		<g>
			<title>std::thread::join (1 samples, 1.96%)</title>
			<rect x="1120.6" y="469" width="23.1" height="15.0" fill="rgb(211,67,9)" rx="2" ry="2"/>
			<text x="1123.59" y="479.5">s..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7
				samples, 13.73%)
			</title>
			<rect x="773.5" y="565" width="162.0" height="15.0" fill="rgb(247,61,28)" rx="2" ry="2"/>
			<text x="776.53" y="575.5">std::thread::_Invoke..</text>
		</g>
		<g>
			<title>PageId::~PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="389" width="23.2" height="15.0" fill="rgb(227,153,10)" rx="2" ry="2"/>
			<text x="1146.73" y="399.5">P..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7
				samples, 13.73%)
			</title>
			<rect x="773.5" y="581" width="162.0" height="15.0" fill="rgb(210,44,5)" rx="2" ry="2"/>
			<text x="776.53" y="591.5">std::thread::_Invoke..</text>
		</g>
		<g>
			<title>__pthread_clockjoin_ex (1 samples, 1.96%)</title>
			<rect x="1120.6" y="437" width="23.1" height="15.0" fill="rgb(218,102,53)" rx="2" ry="2"/>
			<text x="1123.59" y="447.5">_..</text>
		</g>
		<g>
			<title>std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (32 samples, 62.75%)</title>
			<rect x="33.1" y="389" width="740.4" height="15.0" fill="rgb(230,23,35)" rx="2" ry="2"/>
			<text x="36.14" y="399.5">std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base,</text>
		</g>
		<g>
			<title>_IO_sputbackc (1 samples, 1.96%)</title>
			<rect x="935.5" y="533" width="23.1" height="15.0" fill="rgb(206,48,28)" rx="2" ry="2"/>
			<text x="938.49" y="543.5">_..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="341" width="23.2" height="15.0" fill="rgb(239,57,33)" rx="2" ry="2"/>
			<text x="1146.73" y="351.5">s..</text>
		</g>
		<g>
			<title>std::_Destroy&lt;PageId*, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="453" width="23.2" height="15.0" fill="rgb(233,131,27)" rx="2" ry="2"/>
			<text x="1146.73" y="463.5">s..</text>
		</g>
		<g>
			<title>std::pair&lt;PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="485" width="23.2" height="15.0" fill="rgb(234,154,42)" rx="2" ry="2"/>
			<text x="1146.73" y="495.5">s..</text>
		</g>
		<g>
			<title>__gthread_join (1 samples, 1.96%)</title>
			<rect x="1120.6" y="453" width="23.1" height="15.0" fill="rgb(241,116,16)" rx="2" ry="2"/>
			<text x="1123.59" y="463.5">_..</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (32 samples, 62.75%)</title>
			<rect x="33.1" y="437" width="740.4" height="15.0" fill="rgb(230,172,12)" rx="2" ry="2"/>
			<text x="36.14" y="447.5">std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result..</text>
		</g>
		<g>
			<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.92%)</title>
			<rect x="889.2" y="149" width="46.3" height="15.0" fill="rgb(234,9,24)" rx="2" ry="2"/>
			<text x="892.22" y="159.5">std:..</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1166.9" y="549" width="23.1" height="15.0" fill="rgb(217,180,22)" rx="2" ry="2"/>
			<text x="1169.86" y="559.5">s..</text>
		</g>
		<g>
			<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (7 samples, 13.73%)</title>
			<rect x="773.5" y="421" width="162.0" height="15.0" fill="rgb(240,221,16)" rx="2" ry="2"/>
			<text x="776.53" y="431.5">std::function&lt;std::u..</text>
		</g>
		<g>
			<title>__spawni (4 samples, 7.84%)</title>
			<rect x="33.1" y="181" width="92.6" height="15.0" fill="rgb(223,227,21)" rx="2" ry="2"/>
			<text x="36.14" y="191.5">__spawni</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::wait (4 samples, 7.84%)</title>
			<rect x="1028.0" y="549" width="92.6" height="15.0" fill="rgb(247,14,36)" rx="2" ry="2"/>
			<text x="1031.04" y="559.5">std::__futu..</text>
		</g>
		<g>
			<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="866.1" y="117" width="23.1" height="15.0" fill="rgb(220,158,7)" rx="2" ry="2"/>
			<text x="869.08" y="127.5">s..</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (3 samples, 5.88%)</title>
			<rect x="819.8" y="149" width="69.4" height="15.0" fill="rgb(238,177,29)" rx="2" ry="2"/>
			<text x="822.80" y="159.5">std::_H..</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;void, (7 samples, 13.73%)</title>
			<rect x="773.5" y="533" width="162.0" height="15.0" fill="rgb(238,48,8)" rx="2" ry="2"/>
			<text x="776.53" y="543.5">std::__invoke_impl&lt;v..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="101" width="46.3" height="15.0" fill="rgb(234,94,39)" rx="2" ry="2"/>
			<text x="776.53" y="111.5">std:..</text>
		</g>
		<g>
			<title>clone (4 samples, 7.84%)</title>
			<rect x="33.1" y="149" width="92.6" height="15.0" fill="rgb(221,79,30)" rx="2" ry="2"/>
			<text x="36.14" y="159.5">clone</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::wait (1 samples, 1.96%)</title>
			<rect x="1120.6" y="565" width="23.1" height="15.0" fill="rgb(235,181,22)" rx="2" ry="2"/>
			<text x="1123.59" y="575.5">s..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="69" width="46.3" height="15.0" fill="rgb(213,229,27)" rx="2" ry="2"/>
			<text x="776.53" y="79.5">std:..</text>
		</g>
		<g>
			<title>std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)
			</title>
			<rect x="773.5" y="549" width="162.0" height="15.0" fill="rgb(230,139,34)" rx="2" ry="2"/>
			<text x="776.53" y="559.5">std::__invoke&lt;std::_..</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (7 samples, 13.73%)</title>
			<rect x="773.5" y="501" width="162.0" height="15.0" fill="rgb(217,135,22)" rx="2" ry="2"/>
			<text x="776.53" y="511.5">std::__future_base::..</text>
		</g>
		<g>
			<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="533" width="23.2" height="15.0" fill="rgb(232,99,9)" rx="2" ry="2"/>
			<text x="1146.73" y="543.5">s..</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_commonV2::_M_complete_async (4 samples, 7.84%)</title>
			<rect x="1028.0" y="533" width="92.6" height="15.0" fill="rgb(226,22,25)" rx="2" ry="2"/>
			<text x="1031.04" y="543.5">std::__futu..</text>
		</g>
		<g>
			<title>std::basic_streambuf&lt;char, (4 samples, 7.84%)</title>
			<rect x="935.5" y="549" width="92.5" height="15.0" fill="rgb(232,225,20)" rx="2" ry="2"/>
			<text x="938.49" y="559.5">std::basic_..</text>
		</g>
		<g>
			<title>main (11 samples, 21.57%)</title>
			<rect x="935.5" y="645" width="254.5" height="15.0" fill="rgb(215,176,46)" rx="2" ry="2"/>
			<text x="938.49" y="655.5">main</text>
		</g>
		<g>
			<title>std::_Destroy&lt;PageId*&gt; (1 samples, 1.96%)</title>
			<rect x="1143.7" y="437" width="23.2" height="15.0" fill="rgb(253,122,47)" rx="2" ry="2"/>
			<text x="1146.73" y="447.5">s..</text>
		</g>
		<g>
			<title>posix_spawn@@GLIBC_2.15 (4 samples, 7.84%)</title>
			<rect x="33.1" y="197" width="92.6" height="15.0" fill="rgb(243,174,46)" rx="2" ry="2"/>
			<text x="36.14" y="207.5">posix_spawn..</text>
		</g>
		<g>
			<title>std::call_once&lt;void (1 samples, 1.96%)</title>
			<rect x="1120.6" y="517" width="23.1" height="15.0" fill="rgb(247,41,45)" rx="2" ry="2"/>
			<text x="1123.59" y="527.5">s..</text>
		</g>
		<g>
			<title>std::_Hash_bytes (2 samples, 3.92%)</title>
			<rect x="889.2" y="85" width="46.3" height="15.0" fill="rgb(226,73,47)" rx="2" ry="2"/>
			<text x="892.22" y="95.5">std:..</text>
		</g>
		<g>
			<title>do_system (32 samples, 62.75%)</title>
			<rect x="33.1" y="213" width="740.4" height="15.0" fill="rgb(213,177,29)" rx="2" ry="2"/>
			<text x="36.14" y="223.5">do_system</text>
		</g>
		<g>
			<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 1.96%)</title>
			<rect x="1143.7" y="309" width="23.2" height="15.0" fill="rgb(209,214,16)" rx="2" ry="2"/>
			<text x="1146.73" y="319.5">_..</text>
		</g>
		<g>
			<title>std::function&lt;void (7 samples, 13.73%)</title>
			<rect x="773.5" y="261" width="162.0" height="15.0" fill="rgb(254,212,9)" rx="2" ry="2"/>
			<text x="776.53" y="271.5">std::function&lt;void</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::computeForNetwork (7 samples, 13.73%)</title>
			<rect x="1028.0" y="613" width="162.0" height="15.0" fill="rgb(250,75,47)" rx="2" ry="2"/>
			<text x="1031.04" y="623.5">MultiThreadedPageRan..</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;double&gt;, (7 samples, 13.73%)</title>
			<rect x="773.5" y="373" width="162.0" height="15.0" fill="rgb(249,95,35)" rx="2" ry="2"/>
			<text x="776.53" y="383.5">std::__invoke_impl&lt;s..</text>
		</g>
		<g>
			<title>std::__detail::_Map_base&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1166.9" y="581" width="23.1" height="15.0" fill="rgb(233,85,52)" rx="2" ry="2"/>
			<text x="1169.86" y="591.5">s..</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;void, (7 samples, 13.73%)</title>
			<rect x="773.5" y="213" width="162.0" height="15.0" fill="rgb(225,222,2)" rx="2" ry="2"/>
			<text x="776.53" y="223.5">std::__invoke_impl&lt;v..</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_commonV2::_M_join (1 samples, 1.96%)</title>
			<rect x="1120.6" y="533" width="23.1" height="15.0" fill="rgb(209,74,29)" rx="2" ry="2"/>
			<text x="1123.59" y="543.5">s..</text>
		</g>
		<g>
			<title>std::thread::join (4 samples, 7.84%)</title>
			<rect x="1028.0" y="453" width="92.6" height="15.0" fill="rgb(209,27,40)" rx="2" ry="2"/>
			<text x="1031.04" y="463.5">std::thread..</text>
		</g>
		<g>
			<title>std::operator==&lt;char&gt; (1 samples, 1.96%)</title>
			<rect x="866.1" y="69" width="23.1" height="15.0" fill="rgb(235,174,43)" rx="2" ry="2"/>
			<text x="869.08" y="79.5">s..</text>
		</g>
		<g>
			<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;MultiThreadedPageRankComputer::{unnamed (32 samples, 62.75%)</title>
			<rect x="33.1" y="357" width="740.4" height="15.0" fill="rgb(222,197,44)" rx="2" ry="2"/>
			<text x="36.14" y="367.5">std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;MultiThreadedPageRankComp..</text>
		</g>
		<g>
			<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (7 samples, 13.73%)</title>
			<rect x="773.5" y="405" width="162.0" height="15.0" fill="rgb(223,216,1)" rx="2" ry="2"/>
			<text x="776.53" y="415.5">std::_Function_handl..</text>
		</g>
		<g>
			<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (32 samples, 62.75%)</title>
			<rect x="33.1" y="421" width="740.4" height="15.0" fill="rgb(242,117,22)" rx="2" ry="2"/>
			<text x="36.14" y="431.5">std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,</text>
		</g>
		<g>
			<title>wait4 (28 samples, 54.90%)</title>
			<rect x="125.7" y="197" width="647.8" height="15.0" fill="rgb(252,86,32)" rx="2" ry="2"/>
			<text x="128.69" y="207.5">wait4</text>
		</g>
		<g>
			<title>std::basic_streambuf&lt;char, (4 samples, 7.84%)</title>
			<rect x="935.5" y="565" width="92.5" height="15.0" fill="rgb(246,219,33)" rx="2" ry="2"/>
			<text x="938.49" y="575.5">std::basic_..</text>
		</g>
		<g>
			<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;double&gt;, (7 samples, 13.73%)</title>
			<rect x="773.5" y="357" width="162.0" height="15.0" fill="rgb(223,32,50)" rx="2" ry="2"/>
			<text x="776.53" y="367.5">std::__future_base::..</text>
		</g>
		<g>
			<title>std::getline&lt;char, (4 samples, 7.84%)</title>
			<rect x="935.5" y="613" width="92.5" height="15.0" fill="rgb(246,223,53)" rx="2" ry="2"/>
			<text x="938.49" y="623.5">std::getlin..</text>
		</g>
		<g>
			<title>start_thread (39 samples, 76.47%)</title>
			<rect x="33.1" y="629" width="902.4" height="15.0" fill="rgb(217,136,47)" rx="2" ry="2"/>
			<text x="36.14" y="639.5">start_thread</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="373" width="23.2" height="15.0" fill="rgb(210,224,40)" rx="2" ry="2"/>
			<text x="1146.73" y="383.5">s..</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (3 samples, 5.88%)</title>
			<rect x="819.8" y="133" width="69.4" height="15.0" fill="rgb(249,186,14)" rx="2" ry="2"/>
			<text x="822.80" y="143.5">std::_H..</text>
		</g>
		<g>
			<title>std::future&lt;double&gt;::get (1 samples, 1.96%)</title>
			<rect x="1120.6" y="597" width="23.1" height="15.0" fill="rgb(244,5,49)" rx="2" ry="2"/>
			<text x="1123.59" y="607.5">s..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="133" width="46.3" height="15.0" fill="rgb(234,160,10)" rx="2" ry="2"/>
			<text x="776.53" y="143.5">std:..</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (32 samples, 62.75%)</title>
			<rect x="33.1" y="501" width="740.4" height="15.0" fill="rgb(221,106,7)" rx="2" ry="2"/>
			<text x="36.14" y="511.5">std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Re..</text>
		</g>
		<g>
			<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 1.96%)</title>
			<rect x="1143.7" y="421" width="23.2" height="15.0" fill="rgb(218,96,15)" rx="2" ry="2"/>
			<text x="1146.73" y="431.5">s..</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_commonV2::_M_complete_async (1 samples, 1.96%)</title>
			<rect x="1120.6" y="549" width="23.1" height="15.0" fill="rgb(246,204,29)" rx="2" ry="2"/>
			<text x="1123.59" y="559.5">s..</text>
		</g>
		<g>
			<title>std::_Hash_impl::hash (2 samples, 3.92%)</title>
			<rect x="889.2" y="101" width="46.3" height="15.0" fill="rgb(239,103,19)" rx="2" ry="2"/>
			<text x="892.22" y="111.5">std:..</text>
		</g>
		<g>
			<title>std::call_once&lt;void (32 samples, 62.75%)</title>
			<rect x="33.1" y="485" width="740.4" height="15.0" fill="rgb(240,112,18)" rx="2" ry="2"/>
			<text x="36.14" y="495.5">std::call_once&lt;void</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1166.9" y="565" width="23.1" height="15.0" fill="rgb(245,185,0)" rx="2" ry="2"/>
			<text x="1169.86" y="575.5">s..</text>
		</g>
		<g>
			<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="501" width="23.2" height="15.0" fill="rgb(232,210,45)" rx="2" ry="2"/>
			<text x="1146.73" y="511.5">_..</text>
		</g>
		<g>
			<title>_int_free (1 samples, 1.96%)</title>
			<rect x="1143.7" y="293" width="23.2" height="15.0" fill="rgb(248,221,41)" rx="2" ry="2"/>
			<text x="1146.73" y="303.5">_..</text>
		</g>
		<g>
			<title>std::execute_native_thread_routine (39 samples, 76.47%)</title>
			<rect x="33.1" y="613" width="902.4" height="15.0" fill="rgb(220,81,24)" rx="2" ry="2"/>
			<text x="36.14" y="623.5">std::execute_native_thread_routine</text>
		</g>
		<g>
			<title>?? (1 samples, 1.96%)</title>
			<rect x="10.0" y="613" width="23.1" height="15.0" fill="rgb(223,19,23)" rx="2" ry="2"/>
			<text x="13.00" y="623.5">??</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="325" width="740.4" height="15.0" fill="rgb(245,6,36)" rx="2" ry="2"/>
			<text x="36.14" y="335.5">std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="565" width="23.2" height="15.0" fill="rgb(220,119,28)" rx="2" ry="2"/>
			<text x="1146.73" y="575.5">s..</text>
		</g>
		<g>
			<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="889.2" y="117" width="46.3" height="15.0" fill="rgb(252,8,35)" rx="2" ry="2"/>
			<text x="892.22" y="127.5">std:..</text>
		</g>
		<g>
			<title>__memmove_avx_unaligned_erms (2 samples, 3.92%)</title>
			<rect x="773.5" y="37" width="46.3" height="15.0" fill="rgb(240,179,19)" rx="2" ry="2"/>
			<text x="776.53" y="47.5">__me..</text>
		</g>
		<g>
			<title>__pthread_once_slow (1 samples, 1.96%)</title>
			<rect x="1120.6" y="485" width="23.1" height="15.0" fill="rgb(226,118,21)" rx="2" ry="2"/>
			<text x="1123.59" y="495.5">_..</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::waitForAll&lt;MultiThreadedPageRankComputer::{unnamed (4 samples, 7.84%)</title>
			<rect x="1028.0" y="581" width="92.6" height="15.0" fill="rgb(230,162,18)" rx="2" ry="2"/>
			<text x="1031.04" y="591.5">MultiThread..</text>
		</g>
		<g>
			<title>std::call_once&lt;void (7 samples, 13.73%)</title>
			<rect x="773.5" y="485" width="162.0" height="15.0" fill="rgb(238,13,21)" rx="2" ry="2"/>
			<text x="776.53" y="495.5">std::call_once&lt;void</text>
		</g>
		<g>
			<title>?? (1 samples, 1.96%)</title>
			<rect x="10.0" y="629" width="23.1" height="15.0" fill="rgb(245,120,18)" rx="2" ry="2"/>
			<text x="13.00" y="639.5">??</text>
		</g>
		<g>
			<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId
				(7 samples, 13.73%)
			</title>
			<rect x="773.5" y="597" width="162.0" height="15.0" fill="rgb(235,205,51)" rx="2" ry="2"/>
			<text x="776.53" y="607.5">std::thread::_State_..</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_commonV2::_M_join (4 samples, 7.84%)</title>
			<rect x="1028.0" y="517" width="92.6" height="15.0" fill="rgb(213,149,2)" rx="2" ry="2"/>
			<text x="1031.04" y="527.5">std::__futu..</text>
		</g>
		<g>
			<title>PageIdHash::operator() (2 samples, 3.92%)</title>
			<rect x="889.2" y="133" width="46.3" height="15.0" fill="rgb(253,223,4)" rx="2" ry="2"/>
			<text x="892.22" y="143.5">Page..</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="277" width="740.4" height="15.0" fill="rgb(222,40,41)" rx="2" ry="2"/>
			<text x="36.14" y="287.5">MultiThreadedPageRankComputer::pool&lt;Page</text>
		</g>
		<g>
			<title>?? (1 samples, 1.96%)</title>
			<rect x="10.0" y="645" width="23.1" height="15.0" fill="rgb(245,133,13)" rx="2" ry="2"/>
			<text x="13.00" y="655.5">??</text>
		</g>
		<g>
			<title>__spawnix (4 samples, 7.84%)</title>
			<rect x="33.1" y="165" width="92.6" height="15.0" fill="rgb(235,89,54)" rx="2" ry="2"/>
			<text x="36.14" y="175.5">__spawnix</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)</title>
			<rect x="773.5" y="517" width="162.0" height="15.0" fill="rgb(235,55,23)" rx="2" ry="2"/>
			<text x="776.53" y="527.5">std::__future_base::..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="357" width="23.2" height="15.0" fill="rgb(233,213,16)" rx="2" ry="2"/>
			<text x="1146.73" y="367.5">s..</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;MultiThreadedPageRankComputer::{unnamed (32 samples, 62.75%)</title>
			<rect x="33.1" y="293" width="740.4" height="15.0" fill="rgb(235,31,20)" rx="2" ry="2"/>
			<text x="36.14" y="303.5">std::__invoke_impl&lt;MultiThreadedPageRankComputer::{unnamed</text>
		</g>
		<g>
			<title>PageId::operator== (1 samples, 1.96%)</title>
			<rect x="866.1" y="85" width="23.1" height="15.0" fill="rgb(217,227,15)" rx="2" ry="2"/>
			<text x="869.08" y="95.5">P..</text>
		</g>
		<g>
			<title>clone (39 samples, 76.47%)</title>
			<rect x="33.1" y="645" width="902.4" height="15.0" fill="rgb(240,188,14)" rx="2" ry="2"/>
			<text x="36.14" y="655.5">clone</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::poolAndWait&lt;Page (4 samples, 7.84%)</title>
			<rect x="1028.0" y="597" width="92.6" height="15.0" fill="rgb(237,116,28)" rx="2" ry="2"/>
			<text x="1031.04" y="607.5">MultiThread..</text>
		</g>
		<g>
			<title>std::unordered_map&lt;PageId, (5 samples, 9.80%)</title>
			<rect x="819.8" y="181" width="115.7" height="15.0" fill="rgb(241,32,50)" rx="2" ry="2"/>
			<text x="822.80" y="191.5">std::unordered..</text>
		</g>
		<g>
			<title>Sha256IdGenerator::generateId (32 samples, 62.75%)</title>
			<rect x="33.1" y="229" width="740.4" height="15.0" fill="rgb(235,7,29)" rx="2" ry="2"/>
			<text x="36.14" y="239.5">Sha256IdGenerator::generateId</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="85" width="46.3" height="15.0" fill="rgb(216,199,6)" rx="2" ry="2"/>
			<text x="776.53" y="95.5">std:..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="165" width="46.3" height="15.0" fill="rgb(214,37,20)" rx="2" ry="2"/>
			<text x="776.53" y="175.5">std:..</text>
		</g>
		<g>
			<title>__gnu_cxx::stdio_sync_filebuf&lt;char, (3 samples, 5.88%)</title>
			<rect x="958.6" y="517" width="69.4" height="15.0" fill="rgb(247,8,49)" rx="2" ry="2"/>
			<text x="961.63" y="527.5">__gnu_c..</text>
		</g>
		<g>
			<title>__gthread_once (1 samples, 1.96%)</title>
			<rect x="1120.6" y="501" width="23.1" height="15.0" fill="rgb(248,197,14)" rx="2" ry="2"/>
			<text x="1123.59" y="511.5">_..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples,
				62.75%)
			</title>
			<rect x="33.1" y="581" width="740.4" height="15.0" fill="rgb(205,214,34)" rx="2" ry="2"/>
			<text x="36.14" y="591.5">std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tupl..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="341" width="740.4" height="15.0" fill="rgb(227,98,45)" rx="2" ry="2"/>
			<text x="36.14" y="351.5">std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page</text>
		</g>
		<g>
			<title>std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="549" width="740.4" height="15.0" fill="rgb(214,77,53)" rx="2" ry="2"/>
			<text x="36.14" y="559.5">std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPage..</text>
		</g>
		<g>
			<title>std::call_once&lt;void (4 samples, 7.84%)</title>
			<rect x="1028.0" y="501" width="92.6" height="15.0" fill="rgb(248,107,19)" rx="2" ry="2"/>
			<text x="1031.04" y="511.5">std::call_o..</text>
		</g>
		<g>
			<title>StdinGenerator::generateNetworkOfSize (4 samples, 7.84%)</title>
			<rect x="935.5" y="629" width="92.5" height="15.0" fill="rgb(252,108,39)" rx="2" ry="2"/>
			<text x="938.49" y="639.5">StdinGenera..</text>
		</g>
		<g>
			<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="549" width="23.2" height="15.0" fill="rgb(235,39,6)" rx="2" ry="2"/>
			<text x="1146.73" y="559.5">s..</text>
		</g>
		<g>
			<title>all (51 samples, 100%)</title>
			<rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(239,93,25)" rx="2" ry="2"/>
			<text x="13.00" y="671.5"></text>
		</g>
		<g>
			<title>(anonymous (2 samples, 3.92%)</title>
			<rect x="889.2" y="69" width="46.3" height="15.0" fill="rgb(217,81,21)" rx="2" ry="2"/>
			<text x="892.22" y="79.5">(ano..</text>
		</g>
		<g>
			<title>std::unordered_map&lt;PageId, (2 samples, 3.92%)</title>
			<rect x="1143.7" y="597" width="46.3" height="15.0" fill="rgb(214,1,23)" rx="2" ry="2"/>
			<text x="1146.73" y="607.5">std:..</text>
		</g>
		<g>
			<title>__pthread_once_slow (7 samples, 13.73%)</title>
			<rect x="773.5" y="453" width="162.0" height="15.0" fill="rgb(227,122,10)" rx="2" ry="2"/>
			<text x="776.53" y="463.5">__pthread_once_slow</text>
		</g>
		<g>
			<title>__pthread_clockjoin_ex (4 samples, 7.84%)</title>
			<rect x="1028.0" y="421" width="92.6" height="15.0" fill="rgb(231,57,54)" rx="2" ry="2"/>
			<text x="1031.04" y="431.5">__pthread_c..</text>
		</g>
		<g>
			<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.96%)</title>
			<rect x="1143.7" y="325" width="23.2" height="15.0" fill="rgb(251,164,12)" rx="2" ry="2"/>
			<text x="1146.73" y="335.5">s..</text>
		</g>
		<g>
			<title>std::char_traits&lt;char&gt;::copy (2 samples, 3.92%)</title>
			<rect x="773.5" y="53" width="46.3" height="15.0" fill="rgb(218,193,27)" rx="2" ry="2"/>
			<text x="776.53" y="63.5">std:..</text>
		</g>
		<g>
			<title>std::char_traits&lt;char&gt;::compare (1 samples, 1.96%)</title>
			<rect x="866.1" y="53" width="23.1" height="15.0" fill="rgb(231,36,47)" rx="2" ry="2"/>
			<text x="869.08" y="63.5">s..</text>
		</g>
		<g>
			<title>std::__basic_future&lt;double&gt;::_M_get_result (1 samples, 1.96%)</title>
			<rect x="1120.6" y="581" width="23.1" height="15.0" fill="rgb(242,92,47)" rx="2" ry="2"/>
			<text x="1123.59" y="591.5">s..</text>
		</g>
		<g>
			<title>std::function&lt;void (32 samples, 62.75%)</title>
			<rect x="33.1" y="261" width="740.4" height="15.0" fill="rgb(211,21,39)" rx="2" ry="2"/>
			<text x="36.14" y="271.5">std::function&lt;void</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;double, (7 samples, 13.73%)</title>
			<rect x="773.5" y="293" width="162.0" height="15.0" fill="rgb(243,105,11)" rx="2" ry="2"/>
			<text x="776.53" y="303.5">std::__invoke_impl&lt;d..</text>
		</g>
		<g>
			<title>std::basic_streambuf&lt;char, (4 samples, 7.84%)</title>
			<rect x="935.5" y="581" width="92.5" height="15.0" fill="rgb(248,114,53)" rx="2" ry="2"/>
			<text x="938.49" y="591.5">std::basic_..</text>
		</g>
		<g>
			<title>PageId::PageId (2 samples, 3.92%)</title>
			<rect x="773.5" y="181" width="46.3" height="15.0" fill="rgb(234,114,36)" rx="2" ry="2"/>
			<text x="776.53" y="191.5">Page..</text>
		</g>
		<g>
			<title>std::__invoke&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)</title>
			<rect x="773.5" y="309" width="162.0" height="15.0" fill="rgb(205,211,45)" rx="2" ry="2"/>
			<text x="776.53" y="319.5">std::__invoke&lt;MultiT..</text>
		</g>
		<g>
			<title>std::__invoke_r&lt;void, (7 samples, 13.73%)</title>
			<rect x="773.5" y="229" width="162.0" height="15.0" fill="rgb(217,185,34)" rx="2" ry="2"/>
			<text x="776.53" y="239.5">std::__invoke_r&lt;void,</text>
		</g>
		<g>
			<title>std::__detail::_Map_base&lt;PageId, (5 samples, 9.80%)</title>
			<rect x="819.8" y="165" width="115.7" height="15.0" fill="rgb(213,174,47)" rx="2" ry="2"/>
			<text x="822.80" y="175.5">std::__detail:..</text>
		</g>
		<g>
			<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.96%)</title>
			<rect x="1143.7" y="517" width="23.2" height="15.0" fill="rgb(227,194,27)" rx="2" ry="2"/>
			<text x="1146.73" y="527.5">s..</text>
		</g>
		<g>
			<title>__pthread_once_slow (4 samples, 7.84%)</title>
			<rect x="1028.0" y="469" width="92.6" height="15.0" fill="rgb(244,119,4)" rx="2" ry="2"/>
			<text x="1031.04" y="479.5">__pthread_o..</text>
		</g>
		<g>
			<title>std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;MultiThreadedPageRankComputer::{unnamed (32 samples, 62.75%)</title>
			<rect x="33.1" y="373" width="740.4" height="15.0" fill="rgb(224,161,19)" rx="2" ry="2"/>
			<text x="36.14" y="383.5">std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;MultiThreadedPageRankComputer::{unnamed</text>
		</g>
		<g>
			<title>std::_Hashtable&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="581" width="23.2" height="15.0" fill="rgb(248,146,42)" rx="2" ry="2"/>
			<text x="1146.73" y="591.5">s..</text>
		</g>
		<g>
			<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (32 samples, 62.75%)</title>
			<rect x="33.1" y="405" width="740.4" height="15.0" fill="rgb(214,32,12)" rx="2" ry="2"/>
			<text x="36.14" y="415.5">std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,</text>
		</g>
		<g>
			<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="517" width="740.4" height="15.0" fill="rgb(208,93,17)" rx="2" ry="2"/>
			<text x="36.14" y="527.5">std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)</title>
			<rect x="773.5" y="325" width="162.0" height="15.0" fill="rgb(226,153,4)" rx="2" ry="2"/>
			<text x="776.53" y="335.5">std::thread::_Invoke..</text>
		</g>
		<g>
			<title>Page::generateId (32 samples, 62.75%)</title>
			<rect x="33.1" y="245" width="740.4" height="15.0" fill="rgb(208,170,32)" rx="2" ry="2"/>
			<text x="36.14" y="255.5">Page::generateId</text>
		</g>
		<g>
			<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (7 samples, 13.73%)</title>
			<rect x="773.5" y="437" width="162.0" height="15.0" fill="rgb(245,54,23)" rx="2" ry="2"/>
			<text x="776.53" y="447.5">std::__future_base::..</text>
		</g>
		<g>
			<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.96%)</title>
			<rect x="866.1" y="101" width="23.1" height="15.0" fill="rgb(236,222,44)" rx="2" ry="2"/>
			<text x="869.08" y="111.5">s..</text>
		</g>
		<g>
			<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)</title>
			<rect x="773.5" y="341" width="162.0" height="15.0" fill="rgb(206,13,38)" rx="2" ry="2"/>
			<text x="776.53" y="351.5">std::thread::_Invoke..</text>
		</g>
		<g>
			<title>MultiThreadedPageRankComputer::pool&lt;std::pair&lt;PageId (7 samples, 13.73%)</title>
			<rect x="773.5" y="277" width="162.0" height="15.0" fill="rgb(240,153,46)" rx="2" ry="2"/>
			<text x="776.53" y="287.5">MultiThreadedPageRan..</text>
		</g>
		<g>
			<title>std::vector&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1143.7" y="469" width="23.2" height="15.0" fill="rgb(228,23,4)" rx="2" ry="2"/>
			<text x="1146.73" y="479.5">s..</text>
		</g>
		<g>
			<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.92%)</title>
			<rect x="773.5" y="117" width="46.3" height="15.0" fill="rgb(249,16,14)" rx="2" ry="2"/>
			<text x="776.53" y="127.5">std:..</text>
		</g>
		<g>
			<title>__memcmp_avx2_movbe (1 samples, 1.96%)</title>
			<rect x="866.1" y="37" width="23.1" height="15.0" fill="rgb(223,170,31)" rx="2" ry="2"/>
			<text x="869.08" y="47.5">_..</text>
		</g>
		<g>
			<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.96%)</title>
			<rect x="1166.9" y="533" width="23.1" height="15.0" fill="rgb(234,217,45)" rx="2" ry="2"/>
			<text x="1169.86" y="543.5">s..</text>
		</g>
		<g>
			<title>std::_Function_handler&lt;void (7 samples, 13.73%)</title>
			<rect x="773.5" y="245" width="162.0" height="15.0" fill="rgb(250,165,0)" rx="2" ry="2"/>
			<text x="776.53" y="255.5">std::_Function_handl..</text>
		</g>
		<g>
			<title>std::__invoke&lt;MultiThreadedPageRankComputer::pool&lt;Page (32 samples, 62.75%)</title>
			<rect x="33.1" y="309" width="740.4" height="15.0" fill="rgb(230,49,30)" rx="2" ry="2"/>
			<text x="36.14" y="319.5">std::__invoke&lt;MultiThreadedPageRankComputer::pool&lt;Page</text>
		</g>
		<g>
			<title>std::_Destroy&lt;PageId&gt; (1 samples, 1.96%)</title>
			<rect x="1143.7" y="405" width="23.2" height="15.0" fill="rgb(221,136,37)" rx="2" ry="2"/>
			<text x="1146.73" y="415.5">s..</text>
		</g>
		<g>
			<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::pool&lt;Page
				(32 samples, 62.75%)
			</title>
			<rect x="33.1" y="597" width="740.4" height="15.0" fill="rgb(218,25,41)" rx="2" ry="2"/>
			<text x="36.14" y="607.5">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::t..</text>
		</g>
	</g>
</svg>
